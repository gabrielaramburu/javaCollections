package tree.binarytree.fromArrayToTree.simplestSolution;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class ArrayToTreeTest {
	@Test
	public void emptyArray() {
		TreeNode expected = null;
		assertEquals(ArrayToTree.arrayToTree(arrayFrom()), expected);
	}

	@Test
	public void smallArray() {
		int array[] = { 7, 3, 9, 1, 5, 8, 10, 0, 2, 4, 6, };
		ArrayToTree.arrayToTree(array);
	}

	@Test
	
	public void arrayWithMultipleElements() {
		int array[] = { -730, -98, -530, 371, -89, 964, 226, 761, -540, -58, -910, -716, -839, 33, 44, 45 };
		ArrayToTree.arrayToTree(array);
	}

	@Test
	public void bigArray() {
		int array[] = { 695, 402, -238, 301, -274, 128, 358, 770, -152, -253, 871, 332, 993, 740, 328, 523, 211, -843,
				-255, -508, -544, 966, 355, 693, -287, 943, 366, 326, 20, -923, -474, -607, -413, -6, -22, 720, -54,
				-958, -133, -110, 194, 500, 895, -151, 216, 991, -11, -423, 709, 641, 624, 555, -117, 264, -887, 360,
				-314, -563, -660, 905, 280, 966, -443, 848, -394, 491, 799, 336, -871, 199, -745, 16, 69, -236, 412,
				721, -338, -652, 317, 688, -906, -246, 339, 633, 910, 499, 219, 887, -600, -816, 97, -178, 673, 76, 544,
				221, 673, 6, 152, 590, 824, 313, 475, -290, 939, -360, -320, -972, 928, 812, 135, 557, -922, -568, 952,
				-775, 323, -73, -134, -46, -741, 954, -607, 415, 303, 639, 80, -75, 343, -878, 4, 794, 895, -487, -287,
				963, -666, -971, -663, -808, -832, -465, 409, 968, -977, -806, -414, -865, 461, 80, 239, -924, -371,
				683, 868, -120, 819, 430, 875, 675, 295, 767, -220, 833, -988, -823, 130, 580, 132, 415, 629, -828, 325,
				-914, 466, -427, 691, -684, 307, 835, 653, 796, -941, -988, -883, 222, 540, 332, 621, -154, 129, 740,
				-993, 231, -544, 273, 311, 784, -823, 501, -758, 540, 709, 704, -299, -556, 433, 267, 423, 219, -830,
				-176, -273, 211, 558, -809, -673, -736, 225, -27, 557, 838, 685, 962, -302, -764, -19, 623, -27, -750,
				-17, 719, 517, -222 };
		ArrayToTree.arrayToTree(array);
	}

	private int[] arrayFrom(int... values) {
		return values;
	}
}
